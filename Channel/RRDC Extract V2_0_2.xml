<channelGroup version="3.4.1">
  <id>9a32d616-ce47-47f4-8b44-cc566c25bd43</id>
  <name>RRDC Extract V2.0.2</name>
  <revision>3</revision>
  <lastModified>
    <time>1479810092967</time>
    <timezone>Europe/London</timezone>
  </lastModified>
  <description>22/11/2016
Externalisation of connection parms
Resilience of connection
Aligned with UHB view names

Dependencies
Configuration Map parameters loaded from
ConfigurationMap_{env}_v{vsn}.properties</description>
  <channels>
    <channel version="3.4.1">
      <id>9b52ae3f-ddc0-46dc-b0e7-87b4b7383e4b</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>IdentifyPatients2_0_2</name>
      <description>This channel identifies the patients to be extracted and for each one sends a message to ExtractPatientDetails&#xd;
&#xd;
V2.0.2 Updated to load connection data from server configuration</description>
      <enabled>true</enabled>
      <lastModified>
        <time>1479814822577</time>
        <timezone>Europe/London</timezone>
      </lastModified>
      <revision>16</revision>
      <sourceConnector version="3.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.jdbc.DatabaseReceiverProperties" version="3.4.1">
          <pluginProperties/>
          <pollConnectorProperties version="3.4.1">
            <pollingType>TIME</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>5000</pollingFrequency>
            <pollingHour>1</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <driver>net.sourceforge.jtds.jdbc.Driver</driver>
          <url></url>
          <username></username>
          <password></password>
          <select>var dbConn;
try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(configurationMap.get(&quot;dbDriver&quot;),
												     configurationMap.get(&quot;dbUrl&quot;),
												     configurationMap.get(&quot;dbUser&quot;),
												     configurationMap.get(&quot;dbPassword&quot;));
	logger.info(&quot;Created new Connection:&quot;+dbConn);
	globalMap.put(&apos;ukrdcDbConn&apos;, dbConn);
	var patient = dbConn.executeCachedQuery(&apos;SELECT &quot;LocalPatientId&quot; as &quot;PID&quot; FROM UKRDC_VIEW_COHORT&apos;);
	return patient;
} finally {
	//if (dbConn) { 
	//	dbConn.close();
	//}
}

</select>
          <update>// This update script will be executed once for every result returned from the above query.
var dbConn;

try {
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://localhost:5432/AGILAUTH&apos;,&apos;postgres&apos;,&apos;postgres&apos;);

} finally {
	if (dbConn) { 
		dbConn.close();
	}
}</update>
          <useScript>true</useScript>
          <cacheResults>true</cacheResults>
          <keepConnectionOpen>true</keepConnectionOpen>
          <updateMode>1</updateMode>
          <retryCount>3</retryCount>
          <retryInterval>10000</retryInterval>
          <fetchSize>1000</fetchSize>
          <encoding>DEFAULT_ENCODING</encoding>
        </properties>
        <transformer version="3.4.1">
          <steps/>
          <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+DQo8
cmVzdWx0Pg0KICAgIDxwaWQ+dmFsdWU8L3BpZD4NCjwvcmVzdWx0Pg0K</inboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.4.1">
          <rules/>
        </filter>
        <transportName>Database Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
            </destinationConnectorProperties>
            <channelId>da25e1e0-d6cc-4a73-9559-919846f5a942</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.4.1">
            <steps/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.4.1">
            <steps/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.4.1">
            <rules/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.4.1">
          <metaDataId>2</metaDataId>
          <name>Destination 2</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.4.1">
            <steps/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.4.1">
            <steps/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.4.1">
            <rules/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
var dbConn = globalChannelMap.get(&apos;ukrdcDbConn&apos;); 
if ( dbConn != null) dbConn.close();

return;</undeployScript>
      <properties version="3.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <tags class="linked-hash-set"/>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <archiveEnabled>true</archiveEnabled>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <codeTemplateLibraries/>
    </channel>
    <channel version="3.4.1">
      <id>da25e1e0-d6cc-4a73-9559-919846f5a942</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>ExtractPatientDetails2_0_2</name>
      <description>This channel accepts an XML message containing a Patient ID (pid) and builds an RDA document for that patient.&#xd;
This is achieved through a number of Source transformer steps to add in data from each of the source tables to build a simple, logical XML structure in tmp.&#xd;
Finally this is transformed (XSLT) into a RDA format and written to a file.&#xd;
&#xd;
2.0.2 - Update dependency to RRLibrary_V2_0_2&#xd;
Update comments in xslt and align channel name with version</description>
      <enabled>true</enabled>
      <lastModified>
        <time>1479813130186</time>
        <timezone>Europe/London</timezone>
      </lastModified>
      <revision>5</revision>
      <sourceConnector version="3.4.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.1">
          <pluginProperties/>
          <sourceConnectorProperties version="3.4.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.4.1">
          <steps>
            <step>
              <sequenceNumber>0</sequenceNumber>
              <name>Add Basic Patient Details</name>
              <script>logger.info(&apos;start basic&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;SendingFacility&quot;, &quot;LocalPatientId&quot;, &quot;BirthTime&quot;, &quot;DeathTime&quot;, &quot;Gender&quot;, 
		   &quot;CountryOfBirth&quot;, &quot;EthnicGroup&quot;, &quot;Occupation&quot; , &quot;PatientLanguage&quot;, &quot;Death&quot;,
		   &quot;FamilyDoctor_GPPracticeId&quot;, &quot;FamilyDoctor_GPId&quot;,
		   &quot;PersonToContactName&quot;,&quot;PersonToContact_ContactNumber&quot;,
		   &quot;PersonToContact_ContactNumberType&quot;,&quot;PersonToContact_Relationship&quot;, &quot;ActionCode&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Patient&quot;, &quot;UKRDC_VIEW_PATIENT&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start basic&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;SendingFacility&quot;, &quot;LocalPatientId&quot;, &quot;BirthTime&quot;, &quot;DeathTime&quot;, &quot;Gender&quot;, 
		   &quot;CountryOfBirth&quot;, &quot;EthnicGroup&quot;, &quot;Occupation&quot; , &quot;PatientLanguage&quot;, &quot;Death&quot;,
		   &quot;FamilyDoctor_GPPracticeId&quot;, &quot;FamilyDoctor_GPId&quot;,
		   &quot;PersonToContactName&quot;,&quot;PersonToContact_ContactNumber&quot;,
		   &quot;PersonToContact_ContactNumberType&quot;,&quot;PersonToContact_Relationship&quot;, &quot;ActionCode&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Patient&quot;, &quot;UKRDC_VIEW_PATIENT&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>1</sequenceNumber>
              <name>Add Name Information</name>
              <script>logger.info(&apos;start name&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Use&quot;, &quot;Prefix&quot;, &quot;Family&quot;, &quot;Given&quot;, &quot;Given2&quot;, &quot;Suffix&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Name&quot;, &quot;UKRDC_VIEW_NAME&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start name&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Use&quot;, &quot;Prefix&quot;, &quot;Family&quot;, &quot;Given&quot;, &quot;Given2&quot;, &quot;Suffix&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Name&quot;, &quot;UKRDC_VIEW_NAME&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>2</sequenceNumber>
              <name>Add Address Information</name>
              <script>logger.info(&apos;start address&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Use&quot;, &quot;FromTime&quot;, &quot;ToTime&quot;, &quot;Street&quot;, &quot;Locality&quot;, &quot;Town&quot;,
		    &quot;County&quot;, &quot;Postcode&quot;, &quot;Country&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Address&quot;, &quot;UKRDC_VIEW_ADDRESS&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start address&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Use&quot;, &quot;FromTime&quot;, &quot;ToTime&quot;, &quot;Street&quot;, &quot;Locality&quot;, &quot;Town&quot;,
		    &quot;County&quot;, &quot;Postcode&quot;, &quot;Country&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Address&quot;, &quot;UKRDC_VIEW_ADDRESS&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>3</sequenceNumber>
              <name>Add Contact Details</name>
              <script>logger.info(&apos;start contact&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Use&quot;, &quot;Value&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;ContactDetail&quot;, &quot;UKRDC_VIEW_CONTACT_DETAIL&quot;,  fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start contact&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Use&quot;, &quot;Value&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;ContactDetail&quot;, &quot;UKRDC_VIEW_CONTACT_DETAIL&quot;,  fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>4</sequenceNumber>
              <name>Add Patient Numbers</name>
              <script>logger.info(&apos;start numbers&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Number&quot;, &quot;Organization&quot;, &quot;NumberType&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;PatientNumber&quot;, &quot;UKRDC_VIEW_PATIENT_NOS&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start numbers&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Number&quot;, &quot;Organization&quot;, &quot;NumberType&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;PatientNumber&quot;, &quot;UKRDC_VIEW_PATIENT_NOS&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>5</sequenceNumber>
              <name>Add Diagnoses</name>
              <script>logger.info(&apos;start diagnosis&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Diagnosis&quot;, &quot;OnsetTime&quot;, &quot;EnteredOn&quot;];
addNodes(tmp, pid, &quot;Diagnosis&quot;, &quot;UKRDC_VIEW_DIAGNOSIS&quot;, fields);
logger.info(&apos;start renal diagnosis&apos;);
var fields = [&quot;Diagnosis&quot;];
addNodes(tmp, pid, &quot;RenalDiagnosis&quot;, &quot;UKRDC_VIEW_RENALDIAGNOSIS&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start diagnosis&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;Diagnosis&quot;, &quot;OnsetTime&quot;, &quot;EnteredOn&quot;];
addNodes(tmp, pid, &quot;Diagnosis&quot;, &quot;UKRDC_VIEW_DIAGNOSIS&quot;, fields);
logger.info(&apos;start renal diagnosis&apos;);
var fields = [&quot;Diagnosis&quot;];
addNodes(tmp, pid, &quot;RenalDiagnosis&quot;, &quot;UKRDC_VIEW_RENALDIAGNOSIS&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>6</sequenceNumber>
              <name>Add Medication</name>
              <script>//var pid = msg[&apos;pid&apos;].toString();
//var fields = [&quot;PrescriptionNumber&quot;, &quot;FromTime&quot;, &quot;ToTime&quot;, &quot;OrderedBy&quot;, &quot;Route&quot;, 
//	      &quot;DrugProductId&quot;, &quot;DrugProductGeneric&quot;, &quot;DrugProductLabelName&quot;, &quot;DrugProductForm&quot;, &quot;DrugProductStrengthUnits&quot;,
//	      &quot;Frequency&quot;, &quot;Comments&quot;, &quot;DoseQuantity&quot;, &quot;Indication&quot;, &quot;UpdatedOn&quot;];
//addNodes(tmp, pid, &quot;Medication&quot;, &quot;UKRDC_VIEW_MEDICATION&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>//var pid = msg[&apos;pid&apos;].toString();
//var fields = [&quot;PrescriptionNumber&quot;, &quot;FromTime&quot;, &quot;ToTime&quot;, &quot;OrderedBy&quot;, &quot;Route&quot;, 
//	      &quot;DrugProductId&quot;, &quot;DrugProductGeneric&quot;, &quot;DrugProductLabelName&quot;, &quot;DrugProductForm&quot;, &quot;DrugProductStrengthUnits&quot;,
//	      &quot;Frequency&quot;, &quot;Comments&quot;, &quot;DoseQuantity&quot;, &quot;Indication&quot;, &quot;UpdatedOn&quot;];
//addNodes(tmp, pid, &quot;Medication&quot;, &quot;UKRDC_VIEW_MEDICATION&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>7</sequenceNumber>
              <name>Add Procedures</name>
              <script>logger.info(&apos;start dialysis session&apos;);
var pid = msg[&apos;pid&apos;].toString();
var dfields = [&quot;Procedure&quot;, &quot;ProcedureTime&quot;, &quot;QHD21&quot;, &quot;QHD30&quot;, &quot;QHD31&quot;];
addNodes(tmp, pid, &quot;DialysisSession&quot;, &quot;UKRDC_VIEW_DIALYSISSESSION&quot;, dfields);
logger.info(&apos;start transplant&apos;);
var tfields = [&quot;ProcedureTime&quot;, &quot;TRA64&quot;, &quot;TRA65&quot;, &quot;TRA66&quot;, &quot;TRA77&quot;, &quot;TRA97&quot;];
addNodes(tmp, pid, &quot;Transplant&quot;, &quot;UKRDC_VIEW_TRANSPLANTS&quot;, tfields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start dialysis session&apos;);
var pid = msg[&apos;pid&apos;].toString();
var dfields = [&quot;Procedure&quot;, &quot;ProcedureTime&quot;, &quot;QHD21&quot;, &quot;QHD30&quot;, &quot;QHD31&quot;];
addNodes(tmp, pid, &quot;DialysisSession&quot;, &quot;UKRDC_VIEW_DIALYSISSESSION&quot;, dfields);
logger.info(&apos;start transplant&apos;);
var tfields = [&quot;ProcedureTime&quot;, &quot;TRA64&quot;, &quot;TRA65&quot;, &quot;TRA66&quot;, &quot;TRA77&quot;, &quot;TRA97&quot;];
addNodes(tmp, pid, &quot;Transplant&quot;, &quot;UKRDC_VIEW_TRANSPLANTS&quot;, tfields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>8</sequenceNumber>
              <name>Add Encounters</name>
              <script>logger.info(&apos;start encounter&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;EncounterType&quot;, &quot;FromTime&quot;, &quot;ToTime&quot;, &quot;VisitDescription&quot;];
addNodes(tmp, pid, &quot;Encounter&quot;, &quot;UKRDC_VIEW_ENCOUNTER&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start encounter&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;EncounterType&quot;, &quot;FromTime&quot;, &quot;ToTime&quot;, &quot;VisitDescription&quot;];
addNodes(tmp, pid, &quot;Encounter&quot;, &quot;UKRDC_VIEW_ENCOUNTER&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>9</sequenceNumber>
              <name>Add Program Membership</name>
              <script>logger.info(&apos;start prog mbr&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;ProgramName&quot;, &quot;ProgramDescription&quot;, &quot;FromTime&quot;];
addNodes(tmp, pid, &quot;ProgramMembership&quot;, &quot;UKRDC_VIEW_PROGRAMMEMBERSHIP&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start prog mbr&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;ProgramName&quot;, &quot;ProgramDescription&quot;, &quot;FromTime&quot;];
addNodes(tmp, pid, &quot;ProgramMembership&quot;, &quot;UKRDC_VIEW_PROGRAMMEMBERSHIP&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>10</sequenceNumber>
              <name>Add Orders</name>
              <script>logger.info(&apos;start orders&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;PlacerId&quot;, &quot;FillerId&quot;, &quot;OrderedBy&quot;,
	         &quot;PatientClass&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Order&quot;, &quot;UKRDC_VIEW_ORDER&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start orders&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;PlacerId&quot;, &quot;FillerId&quot;, &quot;OrderedBy&quot;,
	         &quot;PatientClass&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;Order&quot;, &quot;UKRDC_VIEW_ORDER&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>11</sequenceNumber>
              <name>Add Order Items</name>
              <script>logger.info(&apos;start order items&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;PlacerId&quot;, &quot;ServiceId&quot;, &quot;SpecimenSource&quot;, &quot;SpecimenAdditives&quot;, 
		    &quot;SpecimenReceivedTime&quot;, &quot;SpecimenCollectedTime&quot;, &quot;Duration&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;OrderItem&quot;, &quot;UKRDC_VIEW_ORDER_ITEM&quot;, fields);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start order items&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;PlacerId&quot;, &quot;ServiceId&quot;, &quot;SpecimenSource&quot;, &quot;SpecimenAdditives&quot;, 
		    &quot;SpecimenReceivedTime&quot;, &quot;SpecimenCollectedTime&quot;, &quot;Duration&quot;, &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;OrderItem&quot;, &quot;UKRDC_VIEW_ORDER_ITEM&quot;, fields);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>12</sequenceNumber>
              <name>Add Result Items</name>
              <script>logger.info(&apos;start result items&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;PlacerId&quot;, &quot;ServiceId&quot;, &quot;ObservationValueType&quot;, &quot;SubId&quot;, 
		    &quot;ObservationValue&quot;, &quot;ResultValueUnits&quot;, &quot;ReferenceRange&quot;, 
		    &quot;AbnormalFlags&quot;, &quot;Status&quot;, &quot;ObservationTime&quot;, 
		    &quot;Comments&quot;, &quot;ReferenceComment&quot;, &quot;Assay&quot;, 
		    &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;ResultItem&quot;, &quot;UKRDC_VIEW_RESULT_ITEM&quot;, fields);
logger.info(&apos;start XSLT&apos;);</script>
              <type>JavaScript</type>
              <data>
                <entry>
                  <string>Script</string>
                  <string>logger.info(&apos;start result items&apos;);
var pid = msg[&apos;pid&apos;].toString();
var fields = [&quot;PlacerId&quot;, &quot;ServiceId&quot;, &quot;ObservationValueType&quot;, &quot;SubId&quot;, 
		    &quot;ObservationValue&quot;, &quot;ResultValueUnits&quot;, &quot;ReferenceRange&quot;, 
		    &quot;AbnormalFlags&quot;, &quot;Status&quot;, &quot;ObservationTime&quot;, 
		    &quot;Comments&quot;, &quot;ReferenceComment&quot;, &quot;Assay&quot;, 
		    &quot;UpdatedOn&quot;];
addNodes(tmp, pid, &quot;ResultItem&quot;, &quot;UKRDC_VIEW_RESULT_ITEM&quot;, fields);
logger.info(&apos;start XSLT&apos;);</string>
                </entry>
              </data>
            </step>
            <step>
              <sequenceNumber>13</sequenceNumber>
              <name>To RDA</name>
              <script>tFactory = Packages.javax.xml.transform.TransformerFactory.newInstance();
xsltTemplate = new Packages.java.io.StringReader(&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!--
Baselined 16/11/2016 - as deployed 
V2_0_2 - 22/11/2016 - Baselined
V2_0_1 - 21/11/2016 - UHB onsite change to use Procedure rather than Procedure Id
V2_0_0 - 16/11/2016 - Includes Program Membership
					Amended Diagnosis and added Renal Diagnosis
					Added Encounters
					Added DialysisSession and Transplant
--&gt;
&lt;xsl:stylesheet version=&quot;2.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
xmlns:n1=&quot;http://www.rixg.org.uk/&quot;
xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:fn=&quot;http://www.w3.org/2005/xpath-functions&quot; exclude-result-prefixes=&quot;n1 xs fn&quot;&gt;
	&lt;xsl:output method=&quot;xml&quot; encoding=&quot;UTF-8&quot; byte-order-mark=&quot;no&quot; indent=&quot;yes&quot;/&gt;
	&lt;xsl:template match=&quot;/&quot;&gt;
		&lt;xsl:variable name=&quot;patient&quot; as=&quot;node()?&quot; select=&quot;PatientDetails/Patient&quot;/&gt;
		&lt;xsl:variable name=&quot;patientDetails&quot; as=&quot;node()?&quot; select=&quot;PatientDetails&quot;/&gt;

&lt;n1:PatientRecord xmlns:n1=&quot;http://www.rixg.org.uk/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &gt;
&lt;!--&lt;xsl:attribute name=&quot;xsi:schemaLocation&quot; namespace=&quot;xsi&quot;
select=&quot;file:///C:/Users/user/Dropbox/Renal%20Registry/Schema%20Work/NJ%20UKRDC%20v1.01.xsd&apos;&quot;/&gt;
--&gt;
&lt;xsl:attribute name=&quot;xsi:schemaLocation&quot; namespace=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; select=&quot;&apos;http://www.rixg.org.uk/ file:///C:/Users/user/Dropbox/Renal%20Registry/Schema%20Work/NJ%20UKRDC%20v1.01.xsd&apos;&quot;/&gt;

&lt;!--
&lt;n1:PatientRecord xmlns:n1=&quot;http://www.rixg.org.uk/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
xsi:schemaLocation=&quot;http://www.rixg.org.uk/ file:///C:/Users/user/Dropbox/Renal%20Registry/Schema%20Work/NJ%20UKRDC%20v1.01.xsd&quot;&gt;
--&gt;
			&lt;SendingFacility&gt;&lt;xsl:value-of select=&quot;$patient/SendingFacility&quot; /&gt;&lt;/SendingFacility&gt;
			&lt;Patient&gt;
				&lt;PatientNumbers&gt;
					&lt;PatientNumber&gt;
						&lt;Number&gt;&lt;xsl:value-of select=&quot;$patient/LocalPatientId&quot; /&gt;&lt;/Number&gt;
						&lt;CodeSystem&gt;ODS:&lt;xsl:value-of select=&quot;$patient/SendingFacility&quot; /&gt;&lt;/CodeSystem&gt;
					&lt;/PatientNumber&gt;
					&lt;xsl:for-each select=&quot;$patient/PatientNumber&quot;&gt;
						&lt;PatientNumber&gt;
							&lt;Number&gt;&lt;xsl:value-of select=&quot;./Number&quot; /&gt;&lt;/Number&gt;
							&lt;CodeSystem&gt;&lt;xsl:value-of select=&quot;./CodeSystem&quot; /&gt;&lt;/CodeSystem&gt;
						&lt;/PatientNumber&gt;
					&lt;/xsl:for-each&gt;
				&lt;/PatientNumbers&gt;
				&lt;Names&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Name&quot;&gt;
					&lt;Name use=&quot;{./Use}&quot;&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;Prefix&gt;&lt;xsl:value-of select=&quot;./Prefix&quot; /&gt;&lt;/Prefix&gt;
							&lt;Family&gt;&lt;xsl:value-of select=&quot;./Family&quot; /&gt;&lt;/Family&gt;
							&lt;Given&gt;&lt;xsl:value-of select=&quot;./Given&quot; /&gt;&lt;/Given&gt;
							&lt;Given&gt;&lt;xsl:value-of select=&quot;./Given2&quot; /&gt;&lt;/Given&gt;
							&lt;Suffix&gt;&lt;xsl:value-of select=&quot;./Suffix&quot; /&gt;&lt;/Suffix&gt;
					&lt;/Name&gt;
				&lt;/xsl:for-each&gt;
				&lt;/Names&gt;
				&lt;!-- TODO: Look at UKRDC - schema demanding birth time--&gt;
				&lt;BirthTime&gt;&lt;xsl:value-of select=&quot;$patient/BirthTime&quot; /&gt;T00:00:00Z&lt;/BirthTime&gt;
				&lt;Gender&gt;&lt;xsl:value-of select=&quot;$patient/Gender&quot; /&gt;&lt;/Gender&gt;
				&lt;Addresses&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Address&quot;&gt;
					&lt;Address use=&quot;{./Use}&quot;&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
							&lt;ToTime&gt;&lt;xsl:value-of select=&quot;./ToTime&quot; /&gt;&lt;/ToTime&gt;
							&lt;Street&gt;&lt;xsl:value-of select=&quot;./Street&quot; /&gt;&lt;/Street&gt;
							&lt;Locality&gt;&lt;xsl:value-of select=&quot;./Locality&quot; /&gt;&lt;/Locality&gt;
							&lt;Town&gt;&lt;xsl:value-of select=&quot;./Town&quot; /&gt;&lt;/Town&gt;
							&lt;County&gt;&lt;xsl:value-of select=&quot;./County&quot; /&gt;&lt;/County&gt;
							&lt;Postcode&gt;&lt;xsl:value-of select=&quot;./Postcode&quot; /&gt;&lt;/Postcode&gt;
							&lt;Country&gt;&lt;xsl:value-of select=&quot;./Country&quot; /&gt;&lt;/Country&gt;
					&lt;/Address&gt;
				&lt;/xsl:for-each&gt;
				&lt;/Addresses&gt;
				&lt;ContactDetails&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/ContactDetail&quot;&gt;
					&lt;ContactDetail use=&quot;{./Use}&quot;&gt;
					&lt;!-- TODO: Defensive Coding around optional fields [General Comment] --&gt;
							&lt;Value&gt;&lt;xsl:value-of select=&quot;./Value&quot; /&gt;&lt;/Value&gt;
					&lt;/ContactDetail&gt;
				&lt;/xsl:for-each&gt;
				&lt;/ContactDetails&gt;
				&lt;CountryOfBirth&gt;&lt;xsl:value-of select=&quot;$patient/CountryOfBirth&quot; /&gt;&lt;/CountryOfBirth&gt;
				&lt;FamilyDoctor&gt;
					&lt;GPPracticeId&gt;&lt;xsl:value-of select=&quot;$patient/FamilyDoctor_GPPracticeId&quot; /&gt;&lt;/GPPracticeId&gt;
					&lt;GPId&gt;&lt;xsl:value-of select=&quot;$patient/FamilyDoctor_GPId&quot; /&gt;&lt;/GPId&gt;
				&lt;/FamilyDoctor&gt;
				&lt;PersonToContact&gt;
						&lt;Name&gt;&lt;xsl:value-of select=&quot;$patient/PersonToContactName&quot; /&gt;&lt;/Name&gt;
						&lt;ContactDetails use=&quot;{$patient/PersonToContact_ContactNumberType}&quot;&gt;
								&lt;Value&gt;&lt;xsl:value-of select=&quot;$patient/PersonToContact_ContactNumber&quot; /&gt;&lt;/Value&gt;
						&lt;/ContactDetails&gt;
						&lt;Relationship&gt;&lt;xsl:value-of select=&quot;$patient/PersonToContact_Relationship&quot; /&gt;&lt;/Relationship&gt;
				&lt;/PersonToContact&gt;
				&lt;!-- CodingStandard will be required if EthnicGroup is not NHS DATA DICTIONARY --&gt;
				&lt;EthnicGroup&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;$patient/EthnicGroup&quot; /&gt;&lt;/Code&gt;&lt;/EthnicGroup&gt;
				&lt;Occupation&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;$patient/Occupation&quot; /&gt;&lt;/Code&gt;&lt;/Occupation&gt;
				&lt;PatientLanguage&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;$patient/PatientLanguage&quot; /&gt;&lt;/Code&gt;&lt;/PatientLanguage&gt;
				&lt;Death&gt;&lt;xsl:value-of select=&quot;$patient/Death&quot; /&gt;&lt;/Death&gt;
				
				&lt;ActionCode&gt;&lt;xsl:value-of select=&quot;$patient/ActionCode&quot; /&gt;&lt;/ActionCode&gt;
				&lt;UpdatedOn&gt;&lt;xsl:value-of select=&quot;$patient/UpdatedOn&quot; /&gt;&lt;/UpdatedOn&gt;
			&lt;/Patient&gt;
			&lt;LabOrders&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Order&quot;&gt;
					&lt;LabOrder&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;PlacerId&gt;&lt;xsl:value-of select=&quot;./PlacerId&quot; /&gt;&lt;/PlacerId&gt;
							&lt;xsl:variable name=&quot;placerId&quot; select=&quot;./PlacerId&quot;/&gt;
							&lt;FillerId&gt;&lt;xsl:value-of select=&quot;./FillerId&quot; /&gt;&lt;/FillerId&gt;
							&lt;OrderedBy&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./OrderedBy&quot; /&gt;&lt;/Code&gt;&lt;/OrderedBy&gt;
							&lt;xsl:for-each select=&quot;$patientDetails/OrderItem[PlacerId/text() = $placerId]&quot;&gt;
								&lt;OrderItem&gt;
										&lt;ServiceId&gt;&lt;xsl:value-of select=&quot;./ServiceId&quot; /&gt;&lt;/ServiceId&gt;
										&lt;SpecimenSource&gt;&lt;xsl:value-of select=&quot;./SpecimenSource&quot; /&gt;&lt;/SpecimenSource&gt;
										&lt;SpecimenAdditives&gt;&lt;xsl:value-of select=&quot;./SpecimenAdditives&quot; /&gt;&lt;/SpecimenAdditives&gt;
										&lt;SpecimenReceivedTime&gt;&lt;xsl:value-of select=&quot;./SpecimenReceivedTime&quot; /&gt;&lt;/SpecimenReceivedTime&gt;
										&lt;SpecimenCollectedTime&gt;&lt;xsl:value-of select=&quot;./SpecimenCollectedTime&quot; /&gt;&lt;/SpecimenCollectedTime&gt;
										&lt;Duration&gt;&lt;xsl:value-of select=&quot;./Duration&quot; /&gt;&lt;/Duration&gt;
								&lt;/OrderItem&gt;
							&lt;/xsl:for-each&gt;
							&lt;xsl:for-each select=&quot;$patientDetails/ResultItem[PlacerId/text() = $placerId]&quot;&gt;
								&lt;ResultItems&gt;
										&lt;ObservationValueType&gt;&lt;xsl:value-of select=&quot;./ObservationValueType&quot; /&gt;&lt;/ObservationValueType&gt;
										&lt;ServiceId&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./ServiceId&quot; /&gt;&lt;/Code&gt;&lt;/ServiceId&gt;
										&lt;SubId&gt;&lt;xsl:value-of select=&quot;./SubId&quot; /&gt;&lt;/SubId&gt;
										&lt;ObservationValue&gt;&lt;xsl:value-of select=&quot;./ObservationValue&quot; /&gt;&lt;/ObservationValue&gt;
										&lt;ResultsValueUnits&gt;&lt;xsl:value-of select=&quot;./ResultsValueUnits&quot; /&gt;&lt;/ResultsValueUnits&gt;
										&lt;ReferenceRange&gt;&lt;xsl:value-of select=&quot;./ReferenceRange&quot; /&gt;&lt;/ReferenceRange&gt;
										&lt;AbnormalFlags&gt;&lt;xsl:value-of select=&quot;./AbnormalFlags&quot; /&gt;&lt;/AbnormalFlags&gt;
										&lt;Status&gt;&lt;xsl:value-of select=&quot;./Status&quot; /&gt;&lt;/Status&gt;

										&lt;ObservationTime&gt;&lt;xsl:value-of select=&quot;./ObservationTime&quot; /&gt;&lt;/ObservationTime&gt;
										&lt;Comments&gt;&lt;xsl:value-of select=&quot;./Comments&quot; /&gt;&lt;/Comments&gt;
										&lt;ReferenceComment&gt;&lt;xsl:value-of select=&quot;./ReferenceComment&quot; /&gt;&lt;/ReferenceComment&gt;
										&lt;Assay&gt;&lt;xsl:value-of select=&quot;./Assay&quot; /&gt;&lt;/Assay&gt;

								&lt;/ResultItems&gt;
							&lt;/xsl:for-each&gt;
							&lt;PatientClass&gt;&lt;xsl:value-of select=&quot;./PatientClass&quot; /&gt;&lt;/PatientClass&gt;
					&lt;/LabOrder&gt;
				&lt;/xsl:for-each&gt;
			&lt;/LabOrders&gt;
			&lt;Diagnoses&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Diagnosis&quot;&gt;
					&lt;Diagnosis&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;DiagnosisId&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Diagnosis&quot; /&gt;&lt;/Code&gt;&lt;/DiagnosisId&gt;
							&lt;OnsetTime&gt;&lt;xsl:value-of select=&quot;./OnsetTime&quot; /&gt;&lt;/OnsetTime&gt;
							&lt;EnteredOn&gt;&lt;xsl:value-of select=&quot;./EnteredOn&quot; /&gt;&lt;/EnteredOn&gt;
					&lt;/Diagnosis&gt;
				&lt;/xsl:for-each&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/RenalDiagnosis&quot;&gt;
					&lt;RenalDiagnosis&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;DiagnosisId&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Diagnosis&quot; /&gt;&lt;/Code&gt;&lt;/DiagnosisId&gt;
							&lt;EnteredOn&gt;UNK&lt;/EnteredOn&gt;
					&lt;/RenalDiagnosis&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Diagnoses&gt;
			&lt;Medications&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Medication&quot;&gt;
					&lt;Medication&gt;
							&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;PrescriptionNumber&gt;&lt;xsl:value-of select=&quot;./PrescriptionNumber&quot; /&gt;&lt;/PrescriptionNumber&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
							&lt;ToTime&gt;&lt;xsl:value-of select=&quot;./ToTime&quot; /&gt;&lt;/ToTime&gt;
							&lt;OrderedBy&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./OrderedBy&quot; /&gt;&lt;/Code&gt;&lt;/OrderedBy&gt;
							&lt;Route&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Route&quot; /&gt;&lt;/Code&gt;&lt;/Route&gt;
							&lt;DrugProduct&gt;
								&lt;Id&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./DrugProductId&quot; /&gt;&lt;/Code&gt;&lt;/Id&gt;
								&lt;Generic&gt;&lt;xsl:value-of select=&quot;./DrugProductGeneric&quot; /&gt;&lt;/Generic&gt;
								&lt;LabelName&gt;&lt;xsl:value-of select=&quot;./DrugProductLabelName&quot; /&gt;&lt;/LabelName&gt;
								&lt;Form&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./DrugProductForm&quot; /&gt;&lt;/Code&gt;&lt;/Form&gt;
								&lt;StrengthUnits&gt;&lt;xsl:value-of select=&quot;./DrugProductStrengthUnits&quot; /&gt;&lt;/StrengthUnits&gt;
							&lt;/DrugProduct&gt;
							&lt;Frequency&gt;&lt;xsl:value-of select=&quot;./Frequency&quot; /&gt;&lt;/Frequency&gt;
							&lt;Comments&gt;&lt;xsl:value-of select=&quot;./Comments&quot; /&gt;&lt;/Comments&gt;
							&lt;DoseQuantity&gt;&lt;xsl:value-of select=&quot;./DoseQuantity&quot; /&gt;&lt;/DoseQuantity&gt;
							&lt;Indication&gt;&lt;xsl:value-of select=&quot;./Indication&quot; /&gt;&lt;/Indication&gt;
					&lt;/Medication&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Medications&gt;
			&lt;Procedures&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/DialysisSession&quot;&gt;
					&lt;DialysisSession&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;Procedure&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Procedure&quot; /&gt;&lt;/Code&gt;&lt;/Procedure&gt;
							&lt;ProcedureTime&gt;&lt;xsl:value-of select=&quot;./ProcedureTime&quot; /&gt;&lt;/ProcedureTime&gt;
							&lt;Attributes&gt;
								&lt;QHD21&gt;&lt;xsl:value-of select=&quot;./QHD21&quot; /&gt;&lt;/QHD21&gt;
								&lt;QHD30&gt;&lt;xsl:value-of select=&quot;./QHD30&quot; /&gt;&lt;/QHD30&gt;
								&lt;QHD31&gt;&lt;xsl:value-of select=&quot;./QHD31&quot; /&gt;&lt;/QHD31&gt;
							&lt;/Attributes&gt;
					&lt;/DialysisSession&gt;
				&lt;/xsl:for-each&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Transplant&quot;&gt;
					&lt;Transplant&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;ProcedureTime&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./ProcedureTime&quot; /&gt;&lt;/Code&gt;&lt;/ProcedureTime&gt;
							&lt;EnteredOn&gt;UNK&lt;/EnteredOn&gt;
							&lt;Attributes&gt;
								&lt;TRA64&gt;&lt;xsl:value-of select=&quot;./TRA64&quot; /&gt;&lt;/TRA64&gt;
								&lt;TRA66&gt;&lt;xsl:value-of select=&quot;./TRA66&quot; /&gt;&lt;/TRA66&gt;
								&lt;TRA77&gt;&lt;xsl:value-of select=&quot;./TRA77&quot; /&gt;&lt;/TRA77&gt;
							&lt;/Attributes&gt;
					&lt;/Transplant&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Procedures&gt;
			&lt;Encounters&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Encounter&quot;&gt;
					&lt;Encounter&gt;
							&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;EncounterNumber&gt;UNK&lt;/EncounterNumber&gt;
							&lt;EncounterType&gt;&lt;xsl:value-of select=&quot;./EncounterType&quot; /&gt;&lt;/EncounterType&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
							&lt;ToTime&gt;&lt;xsl:value-of select=&quot;./ToTime&quot; /&gt;&lt;/ToTime&gt;
							&lt;VisitDescription&gt;&lt;xsl:value-of select=&quot;./VisitDescription&quot; /&gt;&lt;/VisitDescription&gt;
					&lt;/Encounter&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Encounters&gt;
			&lt;ProgramMemberships&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/ProgramMembership&quot;&gt;
					&lt;ProgramMembership&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;ProgramName&gt;&lt;xsl:value-of select=&quot;./ProgramName&quot; /&gt;&lt;/ProgramName&gt;
							&lt;ProgramDescription&gt;&lt;xsl:value-of select=&quot;./ProgramDescription&quot; /&gt;&lt;/ProgramDescription&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
					&lt;/ProgramMembership&gt;
				&lt;/xsl:for-each&gt;
			&lt;/ProgramMemberships&gt;
		&lt;/n1:PatientRecord&gt;
	&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;);
transformer = tFactory.newTransformer(new Packages.javax.xml.transform.stream.StreamSource(xsltTemplate));
sourceVar = new Packages.java.io.StringReader(tmp);
resultVar = new Packages.java.io.StringWriter();
transformer.transform(new Packages.javax.xml.transform.stream.StreamSource(sourceVar), new Packages.javax.xml.transform.stream.StreamResult(resultVar));
channelMap.put(&apos;RDA_XML&apos;, resultVar.toString());
</script>
              <type>XSLT Step</type>
              <data>
                <entry>
                  <string>Source</string>
                  <string>tmp</string>
                </entry>
                <entry>
                  <string>Result</string>
                  <string>RDA_XML</string>
                </entry>
                <entry>
                  <string>XsltTemplate</string>
                  <string>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!--
Baselined 16/11/2016 - as deployed 
V2_0_2 - 22/11/2016 - Baselined
V2_0_1 - 21/11/2016 - UHB onsite change to use Procedure rather than Procedure Id
V2_0_0 - 16/11/2016 - Includes Program Membership
					Amended Diagnosis and added Renal Diagnosis
					Added Encounters
					Added DialysisSession and Transplant
--&gt;
&lt;xsl:stylesheet version=&quot;2.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
xmlns:n1=&quot;http://www.rixg.org.uk/&quot;
xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:fn=&quot;http://www.w3.org/2005/xpath-functions&quot; exclude-result-prefixes=&quot;n1 xs fn&quot;&gt;
	&lt;xsl:output method=&quot;xml&quot; encoding=&quot;UTF-8&quot; byte-order-mark=&quot;no&quot; indent=&quot;yes&quot;/&gt;
	&lt;xsl:template match=&quot;/&quot;&gt;
		&lt;xsl:variable name=&quot;patient&quot; as=&quot;node()?&quot; select=&quot;PatientDetails/Patient&quot;/&gt;
		&lt;xsl:variable name=&quot;patientDetails&quot; as=&quot;node()?&quot; select=&quot;PatientDetails&quot;/&gt;

&lt;n1:PatientRecord xmlns:n1=&quot;http://www.rixg.org.uk/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &gt;
&lt;!--&lt;xsl:attribute name=&quot;xsi:schemaLocation&quot; namespace=&quot;xsi&quot;
select=&quot;file:///C:/Users/user/Dropbox/Renal%20Registry/Schema%20Work/NJ%20UKRDC%20v1.01.xsd&apos;&quot;/&gt;
--&gt;
&lt;xsl:attribute name=&quot;xsi:schemaLocation&quot; namespace=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; select=&quot;&apos;http://www.rixg.org.uk/ file:///C:/Users/user/Dropbox/Renal%20Registry/Schema%20Work/NJ%20UKRDC%20v1.01.xsd&apos;&quot;/&gt;

&lt;!--
&lt;n1:PatientRecord xmlns:n1=&quot;http://www.rixg.org.uk/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
xsi:schemaLocation=&quot;http://www.rixg.org.uk/ file:///C:/Users/user/Dropbox/Renal%20Registry/Schema%20Work/NJ%20UKRDC%20v1.01.xsd&quot;&gt;
--&gt;
			&lt;SendingFacility&gt;&lt;xsl:value-of select=&quot;$patient/SendingFacility&quot; /&gt;&lt;/SendingFacility&gt;
			&lt;Patient&gt;
				&lt;PatientNumbers&gt;
					&lt;PatientNumber&gt;
						&lt;Number&gt;&lt;xsl:value-of select=&quot;$patient/LocalPatientId&quot; /&gt;&lt;/Number&gt;
						&lt;CodeSystem&gt;ODS:&lt;xsl:value-of select=&quot;$patient/SendingFacility&quot; /&gt;&lt;/CodeSystem&gt;
					&lt;/PatientNumber&gt;
					&lt;xsl:for-each select=&quot;$patient/PatientNumber&quot;&gt;
						&lt;PatientNumber&gt;
							&lt;Number&gt;&lt;xsl:value-of select=&quot;./Number&quot; /&gt;&lt;/Number&gt;
							&lt;CodeSystem&gt;&lt;xsl:value-of select=&quot;./CodeSystem&quot; /&gt;&lt;/CodeSystem&gt;
						&lt;/PatientNumber&gt;
					&lt;/xsl:for-each&gt;
				&lt;/PatientNumbers&gt;
				&lt;Names&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Name&quot;&gt;
					&lt;Name use=&quot;{./Use}&quot;&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;Prefix&gt;&lt;xsl:value-of select=&quot;./Prefix&quot; /&gt;&lt;/Prefix&gt;
							&lt;Family&gt;&lt;xsl:value-of select=&quot;./Family&quot; /&gt;&lt;/Family&gt;
							&lt;Given&gt;&lt;xsl:value-of select=&quot;./Given&quot; /&gt;&lt;/Given&gt;
							&lt;Given&gt;&lt;xsl:value-of select=&quot;./Given2&quot; /&gt;&lt;/Given&gt;
							&lt;Suffix&gt;&lt;xsl:value-of select=&quot;./Suffix&quot; /&gt;&lt;/Suffix&gt;
					&lt;/Name&gt;
				&lt;/xsl:for-each&gt;
				&lt;/Names&gt;
				&lt;!-- TODO: Look at UKRDC - schema demanding birth time--&gt;
				&lt;BirthTime&gt;&lt;xsl:value-of select=&quot;$patient/BirthTime&quot; /&gt;T00:00:00Z&lt;/BirthTime&gt;
				&lt;Gender&gt;&lt;xsl:value-of select=&quot;$patient/Gender&quot; /&gt;&lt;/Gender&gt;
				&lt;Addresses&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Address&quot;&gt;
					&lt;Address use=&quot;{./Use}&quot;&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
							&lt;ToTime&gt;&lt;xsl:value-of select=&quot;./ToTime&quot; /&gt;&lt;/ToTime&gt;
							&lt;Street&gt;&lt;xsl:value-of select=&quot;./Street&quot; /&gt;&lt;/Street&gt;
							&lt;Locality&gt;&lt;xsl:value-of select=&quot;./Locality&quot; /&gt;&lt;/Locality&gt;
							&lt;Town&gt;&lt;xsl:value-of select=&quot;./Town&quot; /&gt;&lt;/Town&gt;
							&lt;County&gt;&lt;xsl:value-of select=&quot;./County&quot; /&gt;&lt;/County&gt;
							&lt;Postcode&gt;&lt;xsl:value-of select=&quot;./Postcode&quot; /&gt;&lt;/Postcode&gt;
							&lt;Country&gt;&lt;xsl:value-of select=&quot;./Country&quot; /&gt;&lt;/Country&gt;
					&lt;/Address&gt;
				&lt;/xsl:for-each&gt;
				&lt;/Addresses&gt;
				&lt;ContactDetails&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/ContactDetail&quot;&gt;
					&lt;ContactDetail use=&quot;{./Use}&quot;&gt;
					&lt;!-- TODO: Defensive Coding around optional fields [General Comment] --&gt;
							&lt;Value&gt;&lt;xsl:value-of select=&quot;./Value&quot; /&gt;&lt;/Value&gt;
					&lt;/ContactDetail&gt;
				&lt;/xsl:for-each&gt;
				&lt;/ContactDetails&gt;
				&lt;CountryOfBirth&gt;&lt;xsl:value-of select=&quot;$patient/CountryOfBirth&quot; /&gt;&lt;/CountryOfBirth&gt;
				&lt;FamilyDoctor&gt;
					&lt;GPPracticeId&gt;&lt;xsl:value-of select=&quot;$patient/FamilyDoctor_GPPracticeId&quot; /&gt;&lt;/GPPracticeId&gt;
					&lt;GPId&gt;&lt;xsl:value-of select=&quot;$patient/FamilyDoctor_GPId&quot; /&gt;&lt;/GPId&gt;
				&lt;/FamilyDoctor&gt;
				&lt;PersonToContact&gt;
						&lt;Name&gt;&lt;xsl:value-of select=&quot;$patient/PersonToContactName&quot; /&gt;&lt;/Name&gt;
						&lt;ContactDetails use=&quot;{$patient/PersonToContact_ContactNumberType}&quot;&gt;
								&lt;Value&gt;&lt;xsl:value-of select=&quot;$patient/PersonToContact_ContactNumber&quot; /&gt;&lt;/Value&gt;
						&lt;/ContactDetails&gt;
						&lt;Relationship&gt;&lt;xsl:value-of select=&quot;$patient/PersonToContact_Relationship&quot; /&gt;&lt;/Relationship&gt;
				&lt;/PersonToContact&gt;
				&lt;!-- CodingStandard will be required if EthnicGroup is not NHS DATA DICTIONARY --&gt;
				&lt;EthnicGroup&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;$patient/EthnicGroup&quot; /&gt;&lt;/Code&gt;&lt;/EthnicGroup&gt;
				&lt;Occupation&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;$patient/Occupation&quot; /&gt;&lt;/Code&gt;&lt;/Occupation&gt;
				&lt;PatientLanguage&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;$patient/PatientLanguage&quot; /&gt;&lt;/Code&gt;&lt;/PatientLanguage&gt;
				&lt;Death&gt;&lt;xsl:value-of select=&quot;$patient/Death&quot; /&gt;&lt;/Death&gt;
				
				&lt;ActionCode&gt;&lt;xsl:value-of select=&quot;$patient/ActionCode&quot; /&gt;&lt;/ActionCode&gt;
				&lt;UpdatedOn&gt;&lt;xsl:value-of select=&quot;$patient/UpdatedOn&quot; /&gt;&lt;/UpdatedOn&gt;
			&lt;/Patient&gt;
			&lt;LabOrders&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Order&quot;&gt;
					&lt;LabOrder&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;PlacerId&gt;&lt;xsl:value-of select=&quot;./PlacerId&quot; /&gt;&lt;/PlacerId&gt;
							&lt;xsl:variable name=&quot;placerId&quot; select=&quot;./PlacerId&quot;/&gt;
							&lt;FillerId&gt;&lt;xsl:value-of select=&quot;./FillerId&quot; /&gt;&lt;/FillerId&gt;
							&lt;OrderedBy&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./OrderedBy&quot; /&gt;&lt;/Code&gt;&lt;/OrderedBy&gt;
							&lt;xsl:for-each select=&quot;$patientDetails/OrderItem[PlacerId/text() = $placerId]&quot;&gt;
								&lt;OrderItem&gt;
										&lt;ServiceId&gt;&lt;xsl:value-of select=&quot;./ServiceId&quot; /&gt;&lt;/ServiceId&gt;
										&lt;SpecimenSource&gt;&lt;xsl:value-of select=&quot;./SpecimenSource&quot; /&gt;&lt;/SpecimenSource&gt;
										&lt;SpecimenAdditives&gt;&lt;xsl:value-of select=&quot;./SpecimenAdditives&quot; /&gt;&lt;/SpecimenAdditives&gt;
										&lt;SpecimenReceivedTime&gt;&lt;xsl:value-of select=&quot;./SpecimenReceivedTime&quot; /&gt;&lt;/SpecimenReceivedTime&gt;
										&lt;SpecimenCollectedTime&gt;&lt;xsl:value-of select=&quot;./SpecimenCollectedTime&quot; /&gt;&lt;/SpecimenCollectedTime&gt;
										&lt;Duration&gt;&lt;xsl:value-of select=&quot;./Duration&quot; /&gt;&lt;/Duration&gt;
								&lt;/OrderItem&gt;
							&lt;/xsl:for-each&gt;
							&lt;xsl:for-each select=&quot;$patientDetails/ResultItem[PlacerId/text() = $placerId]&quot;&gt;
								&lt;ResultItems&gt;
										&lt;ObservationValueType&gt;&lt;xsl:value-of select=&quot;./ObservationValueType&quot; /&gt;&lt;/ObservationValueType&gt;
										&lt;ServiceId&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./ServiceId&quot; /&gt;&lt;/Code&gt;&lt;/ServiceId&gt;
										&lt;SubId&gt;&lt;xsl:value-of select=&quot;./SubId&quot; /&gt;&lt;/SubId&gt;
										&lt;ObservationValue&gt;&lt;xsl:value-of select=&quot;./ObservationValue&quot; /&gt;&lt;/ObservationValue&gt;
										&lt;ResultsValueUnits&gt;&lt;xsl:value-of select=&quot;./ResultsValueUnits&quot; /&gt;&lt;/ResultsValueUnits&gt;
										&lt;ReferenceRange&gt;&lt;xsl:value-of select=&quot;./ReferenceRange&quot; /&gt;&lt;/ReferenceRange&gt;
										&lt;AbnormalFlags&gt;&lt;xsl:value-of select=&quot;./AbnormalFlags&quot; /&gt;&lt;/AbnormalFlags&gt;
										&lt;Status&gt;&lt;xsl:value-of select=&quot;./Status&quot; /&gt;&lt;/Status&gt;

										&lt;ObservationTime&gt;&lt;xsl:value-of select=&quot;./ObservationTime&quot; /&gt;&lt;/ObservationTime&gt;
										&lt;Comments&gt;&lt;xsl:value-of select=&quot;./Comments&quot; /&gt;&lt;/Comments&gt;
										&lt;ReferenceComment&gt;&lt;xsl:value-of select=&quot;./ReferenceComment&quot; /&gt;&lt;/ReferenceComment&gt;
										&lt;Assay&gt;&lt;xsl:value-of select=&quot;./Assay&quot; /&gt;&lt;/Assay&gt;

								&lt;/ResultItems&gt;
							&lt;/xsl:for-each&gt;
							&lt;PatientClass&gt;&lt;xsl:value-of select=&quot;./PatientClass&quot; /&gt;&lt;/PatientClass&gt;
					&lt;/LabOrder&gt;
				&lt;/xsl:for-each&gt;
			&lt;/LabOrders&gt;
			&lt;Diagnoses&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Diagnosis&quot;&gt;
					&lt;Diagnosis&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;DiagnosisId&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Diagnosis&quot; /&gt;&lt;/Code&gt;&lt;/DiagnosisId&gt;
							&lt;OnsetTime&gt;&lt;xsl:value-of select=&quot;./OnsetTime&quot; /&gt;&lt;/OnsetTime&gt;
							&lt;EnteredOn&gt;&lt;xsl:value-of select=&quot;./EnteredOn&quot; /&gt;&lt;/EnteredOn&gt;
					&lt;/Diagnosis&gt;
				&lt;/xsl:for-each&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/RenalDiagnosis&quot;&gt;
					&lt;RenalDiagnosis&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;DiagnosisId&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Diagnosis&quot; /&gt;&lt;/Code&gt;&lt;/DiagnosisId&gt;
							&lt;EnteredOn&gt;UNK&lt;/EnteredOn&gt;
					&lt;/RenalDiagnosis&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Diagnoses&gt;
			&lt;Medications&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Medication&quot;&gt;
					&lt;Medication&gt;
							&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;PrescriptionNumber&gt;&lt;xsl:value-of select=&quot;./PrescriptionNumber&quot; /&gt;&lt;/PrescriptionNumber&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
							&lt;ToTime&gt;&lt;xsl:value-of select=&quot;./ToTime&quot; /&gt;&lt;/ToTime&gt;
							&lt;OrderedBy&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./OrderedBy&quot; /&gt;&lt;/Code&gt;&lt;/OrderedBy&gt;
							&lt;Route&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Route&quot; /&gt;&lt;/Code&gt;&lt;/Route&gt;
							&lt;DrugProduct&gt;
								&lt;Id&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./DrugProductId&quot; /&gt;&lt;/Code&gt;&lt;/Id&gt;
								&lt;Generic&gt;&lt;xsl:value-of select=&quot;./DrugProductGeneric&quot; /&gt;&lt;/Generic&gt;
								&lt;LabelName&gt;&lt;xsl:value-of select=&quot;./DrugProductLabelName&quot; /&gt;&lt;/LabelName&gt;
								&lt;Form&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./DrugProductForm&quot; /&gt;&lt;/Code&gt;&lt;/Form&gt;
								&lt;StrengthUnits&gt;&lt;xsl:value-of select=&quot;./DrugProductStrengthUnits&quot; /&gt;&lt;/StrengthUnits&gt;
							&lt;/DrugProduct&gt;
							&lt;Frequency&gt;&lt;xsl:value-of select=&quot;./Frequency&quot; /&gt;&lt;/Frequency&gt;
							&lt;Comments&gt;&lt;xsl:value-of select=&quot;./Comments&quot; /&gt;&lt;/Comments&gt;
							&lt;DoseQuantity&gt;&lt;xsl:value-of select=&quot;./DoseQuantity&quot; /&gt;&lt;/DoseQuantity&gt;
							&lt;Indication&gt;&lt;xsl:value-of select=&quot;./Indication&quot; /&gt;&lt;/Indication&gt;
					&lt;/Medication&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Medications&gt;
			&lt;Procedures&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/DialysisSession&quot;&gt;
					&lt;DialysisSession&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;Procedure&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./Procedure&quot; /&gt;&lt;/Code&gt;&lt;/Procedure&gt;
							&lt;ProcedureTime&gt;&lt;xsl:value-of select=&quot;./ProcedureTime&quot; /&gt;&lt;/ProcedureTime&gt;
							&lt;Attributes&gt;
								&lt;QHD21&gt;&lt;xsl:value-of select=&quot;./QHD21&quot; /&gt;&lt;/QHD21&gt;
								&lt;QHD30&gt;&lt;xsl:value-of select=&quot;./QHD30&quot; /&gt;&lt;/QHD30&gt;
								&lt;QHD31&gt;&lt;xsl:value-of select=&quot;./QHD31&quot; /&gt;&lt;/QHD31&gt;
							&lt;/Attributes&gt;
					&lt;/DialysisSession&gt;
				&lt;/xsl:for-each&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Transplant&quot;&gt;
					&lt;Transplant&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;ProcedureTime&gt;&lt;Code&gt;&lt;xsl:value-of select=&quot;./ProcedureTime&quot; /&gt;&lt;/Code&gt;&lt;/ProcedureTime&gt;
							&lt;EnteredOn&gt;UNK&lt;/EnteredOn&gt;
							&lt;Attributes&gt;
								&lt;TRA64&gt;&lt;xsl:value-of select=&quot;./TRA64&quot; /&gt;&lt;/TRA64&gt;
								&lt;TRA66&gt;&lt;xsl:value-of select=&quot;./TRA66&quot; /&gt;&lt;/TRA66&gt;
								&lt;TRA77&gt;&lt;xsl:value-of select=&quot;./TRA77&quot; /&gt;&lt;/TRA77&gt;
							&lt;/Attributes&gt;
					&lt;/Transplant&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Procedures&gt;
			&lt;Encounters&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/Encounter&quot;&gt;
					&lt;Encounter&gt;
							&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;EncounterNumber&gt;UNK&lt;/EncounterNumber&gt;
							&lt;EncounterType&gt;&lt;xsl:value-of select=&quot;./EncounterType&quot; /&gt;&lt;/EncounterType&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
							&lt;ToTime&gt;&lt;xsl:value-of select=&quot;./ToTime&quot; /&gt;&lt;/ToTime&gt;
							&lt;VisitDescription&gt;&lt;xsl:value-of select=&quot;./VisitDescription&quot; /&gt;&lt;/VisitDescription&gt;
					&lt;/Encounter&gt;
				&lt;/xsl:for-each&gt;
			&lt;/Encounters&gt;
			&lt;ProgramMemberships&gt;
				&lt;xsl:for-each select=&quot;$patientDetails/ProgramMembership&quot;&gt;
					&lt;ProgramMembership&gt;
					&lt;!-- TODO: Defensive Coding around optional fields --&gt;
							&lt;ProgramName&gt;&lt;xsl:value-of select=&quot;./ProgramName&quot; /&gt;&lt;/ProgramName&gt;
							&lt;ProgramDescription&gt;&lt;xsl:value-of select=&quot;./ProgramDescription&quot; /&gt;&lt;/ProgramDescription&gt;
							&lt;FromTime&gt;&lt;xsl:value-of select=&quot;./FromTime&quot; /&gt;&lt;/FromTime&gt;
					&lt;/ProgramMembership&gt;
				&lt;/xsl:for-each&gt;
			&lt;/ProgramMemberships&gt;
		&lt;/n1:PatientRecord&gt;
	&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</string>
                </entry>
              </data>
            </step>
          </steps>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64">PFBhdGllbnREZXRhaWxzPg0KPC9QYXRpZW50RGV0YWlscz4N</outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>XML</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
              <stripNamespaces>true</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.4.1">
          <rules/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.4.1">
          <metaDataId>1</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="3.4.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.4.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
            </destinationConnectorProperties>
            <scheme>FILE</scheme>
            <host>c:/mirthtest</host>
            <outputPattern>in-${UUID}.txt</outputPattern>
            <anonymous>true</anonymous>
            <username>anonymous</username>
            <password>anonymous</password>
            <timeout>10000</timeout>
            <secure>true</secure>
            <passive>true</passive>
            <validateConnection>true</validateConnection>
            <outputAppend>true</outputAppend>
            <errorOnExists>false</errorOnExists>
            <temporary>false</temporary>
            <binary>false</binary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${RDA_XML}</template>
          </properties>
          <transformer version="3.4.1">
            <steps/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.4.1">
            <steps/>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.1">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.4.1">
            <rules/>
          </filter>
          <transportName>File Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.4.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <tags class="linked-hash-set"/>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.4.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <archiveEnabled>true</archiveEnabled>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <codeTemplateLibraries>
        <codeTemplateLibrary version="3.4.1">
          <id>a91916e1-43f8-42f5-bcd8-87b14d83562b</id>
          <name>RRLibrary_v2_0_2</name>
          <revision>3</revision>
          <lastModified>
            <time>1479812730639</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <description>Renal Registry Extract Library
</description>
          <includeNewChannels>false</includeNewChannels>
          <enabledChannelIds>
            <string>da25e1e0-d6cc-4a73-9559-919846f5a942</string>
          </enabledChannelIds>
          <disabledChannelIds>
            <string>9b52ae3f-ddc0-46dc-b0e7-87b4b7383e4b</string>
          </disabledChannelIds>
          <codeTemplates>
            <codeTemplate version="3.4.1">
              <id>837910c1-b2c5-4a78-b398-72f7b438a96b</id>
              <name>Add Nodes based on table name and field array</name>
              <revision>4</revision>
              <lastModified>
                <time>1479812848155</time>
                <timezone>Europe/London</timezone>
              </lastModified>
              <type>FUNCTION</type>
              <contextSet>
                <delegate>
                  <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                  <contextType>DESTINATION_DISPATCHER</contextType>
                  <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  <contextType>SOURCE_RECEIVER</contextType>
                  <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                </delegate>
              </contextSet>
              <code>/**
	Add a database read for the tables, fields defined.
	Add the data returned into the node provided.

	22/11/2016-10:24 - add connection resilience
	21/11/2016-16:59 - xml escape the output
	15/11/2016-13:21 - get connection from globalChannelMap

	@param {Any} tmp - The Mirth tmp message
	@param {Any} pid - the patient id
	@param {Any} xmlName - name for canonical XML
	@param {Any} viewName - view name to read
	@param {Any} fields - list of field names to add to the XML
*/
function addNodes(tmp, pid, xmlName, viewName, fields){
	var dbConn;
	var result; 
	var fname;
	var query = &quot;select * from &quot; +viewName + &quot; WHERE \&quot;LocalPatientId\&quot; = &apos;&quot; + pid + &quot;&apos;&quot;;
	try {
		dbConn = getCachedConnection();
		result = dbConn.executeCachedQuery(query);
		while(result.next()){
		   var node;
	        node = new XML(&apos;&lt;&apos; + xmlName + &apos;&gt;&lt;/&apos; + xmlName + &apos;&gt;&apos;);
		   for (index = 0; index &lt; fields.length; index++) {
		      var fName = fields[index];
			 var fValue = result.getString(fName);
		  	 if (fValue !== null) {
				var fValueE = XmlUtil.encode(fValue);
			     node.appendChild(new XML(&apos;&lt;&apos;+fName+&apos;&gt;&apos;+fValueE.trim()+&apos;&lt;/&apos;+fName+&apos;&gt;&apos;));		      
		  	 }
		   }
		   tmp.appendChild(node);
		}	
	} catch(e) {
		// log the error then throw to ensure that the message is flagged in error
		logger.error(query);
		if (fname !== null) {
			logger.error(fname);
		}
		logger.error($(&apos;ChannelName&apos;) + &quot;Message errored because:&quot; + e);
		throw(e);
		
	} finally {
		//Leave the connection open
		//if (dbConn) {
		//	dbConn.close();
		//}
	}
}</code>
            </codeTemplate>
            <codeTemplate version="3.4.1">
              <id>dd6b4b84-8dd9-4269-aac4-b0c3667b7e14</id>
              <name>Get the database connection</name>
              <revision>5</revision>
              <lastModified>
                <time>1479812880608</time>
                <timezone>Europe/London</timezone>
              </lastModified>
              <type>FUNCTION</type>
              <contextSet>
                <delegate>
                  <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                  <contextType>DESTINATION_DISPATCHER</contextType>
                  <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                  <contextType>SOURCE_RECEIVER</contextType>
                  <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                </delegate>
              </contextSet>
              <code>/**
	Get a database connection. 
	Retrieve the connection from the globalMap. If that is not null and not closed then return it
	If it is not viable then get another connection.

	@return {String} return description
*/
function getCachedConnection() {
	var dbConn;
	try {
		dbConn = globalMap.get(&apos;ukrdcDbConn&apos;);
		if (dbConn == null){
			dbConn = DatabaseConnectionFactory.createDatabaseConnection(configurationMap.get(&quot;dbDriver&quot;),
												     configurationMap.get(&quot;dbUrl&quot;),
												     configurationMap.get(&quot;dbUser&quot;),
												     configurationMap.get(&quot;dbPassword&quot;));
			logger.info(&quot;Connection was null. Recreated:&quot;+dbConn);
			globalMap.put(&apos;ukrdcDbConn&apos;, dbConn);
		}
		if (dbConn.getConnection().isClosed()){
			dbConn = DatabaseConnectionFactory.createDatabaseConnection(configurationMap.get(&quot;dbDriver&quot;),
												     configurationMap.get(&quot;dbUrl&quot;),
												     configurationMap.get(&quot;dbUser&quot;),
												     configurationMap.get(&quot;dbPassword&quot;));
			logger.info(&quot;Connection was closed. Recreated:&quot;+dbConn);
			globalMap.put(&apos;ukrdcDbConn&apos;, dbConn);
		}
	} catch(e) {
		// log the error then throw to ensure that the message is flagged in error
		logger.error($(&apos;ChannelName&apos;) + &quot;Error:&quot;);
		logger.error(e);
		throw(e);
		
	} finally {
		//Leave the connection open
		//if (dbConn) {
		//	dbConn.close();
		//}
	}
	return dbConn;
}
</code>
            </codeTemplate>
          </codeTemplates>
        </codeTemplateLibrary>
      </codeTemplateLibraries>
    </channel>
  </channels>
</channelGroup>